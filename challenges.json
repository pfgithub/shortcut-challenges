{
	"_list": [
		"add two numbers",
		"output odd numbers",
		"rpn calculator",
		"calculator",
		"fizzbuzz",
		"hex to rgb",
		"alternating high low",
		"compare version numbers",
		"sort numbers"
	],
	"_initialshortcut": "YnBsaXN0MDDXAQIDBAUGBwgJChESGh1fEBdXRldvcmtmbG93Q2xpZW50VmVyc2lvbl8QF1dGV29ya2Zsb3dDbGllbnRSZWxlYXNlXldGV29ya2Zsb3dJY29uXxAZV0ZXb3JrZmxvd0ltcG9ydFF1ZXN0aW9uc18QEVdGV29ya2Zsb3dBY3Rpb25zXxAPV0ZXb3JrZmxvd1R5cGVzXxAhV0ZXb3JrZmxvd0lucHV0Q29udGVudEl0ZW1DbGFzc2VzVTc1NC4yVTIuMS4z0wsMDQ4PEF8QGFdGV29ya2Zsb3dJY29uU3RhcnRDb2xvcl8QF1dGV29ya2Zsb3dJY29uSW1hZ2VEYXRhXxAZV0ZXb3JrZmxvd0ljb25HbHlwaE51bWJlchK0sqn/QBHod6ChE9IUFRYXXxAaV0ZXb3JrZmxvd0FjdGlvbklkZW50aWZpZXJfEBpXRldvcmtmbG93QWN0aW9uUGFyYW1ldGVyc18QG2lzLndvcmtmbG93LmFjdGlvbnMuY29tbWVudNEYGV8QE1dGQ29tbWVudEFjdGlvblRleHRcQ29kZSBoZXJlLi4uohscWE5DV2lkZ2V0WFdhdGNoS2l0rxARHh8gISIjJCUmJygpKissLS5fEBhXRkFwcFN0b3JlQXBwQ29udGVudEl0ZW1fEBRXRkFydGljbGVDb250ZW50SXRlbV8QFFdGQ29udGFjdENvbnRlbnRJdGVtXxARV0ZEYXRlQ29udGVudEl0ZW1fEBlXRkVtYWlsQWRkcmVzc0NvbnRlbnRJdGVtXxAYV0ZHZW5lcmljRmlsZUNvbnRlbnRJdGVtXxASV0ZJbWFnZUNvbnRlbnRJdGVtXxAaV0ZpVHVuZXNQcm9kdWN0Q29udGVudEl0ZW1fEBVXRkxvY2F0aW9uQ29udGVudEl0ZW1fEBdXRkRDTWFwc0xpbmtDb250ZW50SXRlbV8QFFdGQVZBc3NldENvbnRlbnRJdGVtXxAQV0ZQREZDb250ZW50SXRlbV8QGFdGUGhvbmVOdW1iZXJDb250ZW50SXRlbV8QFVdGUmljaFRleHRDb250ZW50SXRlbV8QGldGU2FmYXJpV2ViUGFnZUNvbnRlbnRJdGVtXxATV0ZTdHJpbmdDb250ZW50SXRlbV8QEFdGVVJMQ29udGVudEl0ZW0ACAAXADEASwBaAHYAigCcAMAAxgDMANMA7gEIASQBKQEqAS0BLgEwATUBUgFvAY0BkAGmAbMBtgG/AcgB3AH3Ag4CJQI5AlUCcAKFAqICugLUAusC/gMZAzEDTgNkAAAAAAAAAgEAAAAAAAAALwAAAAAAAAAAAAAAAAAAA3c=",
	"add two numbers": {
		"description": "add numbers A plus B",
		"input": "dictionary{A: number, B: number}",
		"output": "number",
		"name": "add two numbers",
		"tests": [
			{
				"input": {
					"A": 1,
					"B": 1
				},
				"output": 2
			},
			{
				"input": {
					"A": 6,
					"B": 3
				},
				"output": 9
			},
			{
				"input": {
					"A": 2.5,
					"B": -4
				},
				"output": -1.5
			}
		]
	},
	"output odd numbers": {
		"description": "output all odd numbers between Start and End (inclusive)",
		"input": "dictionary{Start: number, End: number}",
		"output": "list[numbers...]",
		"name": "output odd numbers",
		"tests": [
			{
				"input": {
					"Start": 1,
					"End": 5
				},
				"output": [ 1, 3, 5 ]
			},
			{
				"input": {
					"Start": 4,
					"End": 13
				},
				"output": [ 5, 7, 9, 11, 13 ]
			},
			{
				"input": {
					"Start": -3,
					"End": 6
				},
				"output": [ -3, -1, 1, 3, 5 ]
			}
		]
	},
	"rpn calculator": {
		"description": "calculate numbers using +, -, *, and /. Two numbers will be given, then an operation. Perform that operation on the numbers. Another number and operator will be given. Perform that operataion on the previous output and the new number.",
		"input": "list[number, number, string, number, string, number, string...]",
		"output": "number",
		"name": "rpn calculator",
		"tests": [
			{
				"input": [ 8, 3, "+", 1, "-", "5", "/" ],
				"output": 2
			},
			{
				"input": [ 2, 9, "*", 1, "+" ],
				"output": 19
			},
			{
				"input": [ 1, 1, "+" ],
				"output": 2
			}
		]
	},
	"calculator": {
		"description": "calculate numbers using +, -, *, and / following the order of operations",
		"input": "string\"number + number * number...\"",
		"output": "number",
		"name": "calculator",
		"tests": [
			{
				"input": "1 + 1",
				"output": 2
			},
			{
				"input": "6 + 4 / 2",
				"output": 8
			},
			{
				"input": "8 * 4 + 6 * 20 / 4 - 9 + 4",
				"output": 57
			}
		]
	},
	"fizzbuzz": {
		"description": "repeat for every number from 1 to 100. if it is divisible by 3, replace it with `Fizz`, if it's divisible by 5, replace with `Buzz`, if both replace with `FizzBuzz`",
		"input": "none",
		"output": "list[number|text...]",
		"name": "fizzbuzz",
		"tests": [
			{
				"input": "",
				"output": [1,2,"Fizz",4,"Buzz","Fizz",7,8,"Fizz","Buzz",11,"Fizz",13,14,"FizzBuzz",16,17,"Fizz",19,"Buzz","Fizz",22,23,"Fizz","Buzz",26,"Fizz",28,29,"FizzBuzz",31,32,"Fizz",34,"Buzz","Fizz",37,38,"Fizz","Buzz",41,"Fizz",43,44,"FizzBuzz",46,47,"Fizz",49,"Buzz","Fizz",52,53,"Fizz","Buzz",56,"Fizz",58,59,"FizzBuzz",61,62,"Fizz",64,"Buzz","Fizz",67,68,"Fizz","Buzz",71,"Fizz",73,74,"FizzBuzz",76,77,"Fizz",79,"Buzz","Fizz",82,83,"Fizz","Buzz",86,"Fizz",88,89,"FizzBuzz",91,92,"Fizz",94,"Buzz","Fizz",97,98,"Fizz","Buzz"]
			}
		]
	},
	"hex to rgb": {
		"description": "convert color code from hex to rgb. hex codes start with a # and contain three sets of two hex digits. 00 is 0 and FF is 255. the first two digits are red, second are green, third are blue.",
		"input": "string \"#HexCode\"",
		"output": "list[number Red, number Green, number Blue]",
		"name": "hex to rgb",
		"tests": [
			{
				"input": "#6e57fc",
				"output": [ 110, 87, 252 ]
			},
			{
				"input": "#21d367",
				"output": [ 33, 211, 103 ]
			},
			{
				"input": "#f56a32",
				"output": [ 245, 106, 50 ]
			}
		]
	},
	"alternating high low": {
		"description": "within range Low to High, alternate taking the lowest number. then the highest, then the second lowest... until you are out of numbers.",
		"input": "dictionary{Low: number, High: number}",
		"output": "list[number Lowest, number Highest, number Second Lowest, ...]",
		"name": "alternating high low",
		"tests": [
			{
				"input": {"Low": 5, "High": 10},
				"output": [ 5, 10, 6, 9, 7, 8 ]
			},
			{
				"input": {"Low": -1, "High": 5},
				"output": [ -1, 5, 0, 4, 1, 3, 2 ]
			},
			{
				"input": {"Low": 2, "High": 3},
				"output": [ 2, 3 ]
			},
			{
				"input": {"Low": 8, "High": 8},
				"output": [ 8 ]
			}
		]
	},
	"compare version numbers": {
		"description": "compare x.y.z... style version numbers. Output 1 if A is greater and -1 if B is greater. Output 0 if they are the same. For example, 1.0.0 > 0.1 and 2 > 1.0.5.9.3. See tests for more examples.",
		"input": "dictionary{A: string, B: string}",
		"output": "number",
		"name": "compare version numbers",
		"tests": [
			{
				"input": {"A": "1", "B": "2"},
				"output": -1
			},
			{
				"input": {"A": "1.0.1.8", "B": "1.0.2.1.6"},
				"output": -1
			},
			{
				"input": {"A": "1.0.1.18", "B": "1.0.1.9"},
				"output": -1
			},
			{
				"input": {"A": "5.7", "B": "6"},
				"output": -1
			},
			{
				"input": {"A": "1", "B": "1.0"},
				"output": 0
			},
			{
				"input": {"A": "1.9.2.0.1", "B": "1.9.2.0.1.0"},
				"output": 0
			},
			{
				"input": {"A": "5.7.0.0.0", "B": "5.7"},
				"output": 0
			},
			{
				"input": {"A": "2", "B": "1"},
				"output": 1
			},
			{
				"input": {"A": "1.9.2.0.1.1", "B": "1.9.2.0.1.0"},
				"output": 1
			},
			{
				"input": {"A": "5.7.0.0.0.1", "B": "5.7"},
				"output": 1
			}
		]
	},
	"sort numbers": {
		"description": "sort a list of numbers in order from lowerst to highest",
		"input": "list[numbers...]",
		"output": "list[numbers...]",
		"name": "sort numbers",
		"tests": [
			{
				"input": [5, 4, 3, 2, 1],
				"output": [ 1, 2, 3, 4, 5 ]
			},
			{
				"input": [9, 4, 7, 23, 1, 4],
				"output": [ 1, 4, 4, 7, 9, 23 ]
			}
		]
	}
}
